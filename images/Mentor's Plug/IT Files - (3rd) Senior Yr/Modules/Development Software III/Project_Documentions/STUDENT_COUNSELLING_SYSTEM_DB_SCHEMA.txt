CREATE TABLE Events (
  event_id INT PRIMARY KEY,
  event_name VARCHAR(255),
  description TEXT,
  date DATE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP,
  updated_by VARCHAR(255)
);


CREATE TABLE Employees (
  EmployeeID int,
  FirstName varchar(255),
  LastName varchar(255),
  BirthDate date,
  Age AS (DATEDIFF(year, BirthDate, GETDATE())) -- This is a computed column
);

-----------------------------------------------------------------------------------------------------
1. Login
Description: To access the app, use your admin credentials to log in securely.
Step-by-Step:
Open the app.
On the login screen, enter your username and password.
Click the “Login” button.
Imagery Suggestion: Include a screenshot of the login screen with input fields for username and password. An arrow pointing to the “Login” button can emphasize the action.
!Login Screen
-----------------------------------------------------------------------------------------------------
Good afternoon, Madam.

I'll like to state that I'm speaking for myself and not the entire group here, but Madam I failing to understand your marking criteria and mark allocation, we didn't include group name you penized us for that and it understandable, its carelessness on our part. "Why do you keep submitting document that is in presentation format" here I'm really failing to understand, as a team we are creating document/s to present and share the details of the system with client/ System Coordinator in this case, so if the document doesn't have to be in presentation than what format should it be in, and please enlighten me on what is presentation format, because we structured our document the tradional way.
Regarding the rubric, Madam you gave us a 2.5 for Indtroduction and I believe that the introduction was clear and consice we covered the why "purpose" of the solution, core features, target audience, and expected outcome summarizing the document in the first read, according to our research this is a great why to capture and provides an overrall view of the document. And again with the layout and design Madam please help me understand what format you require the documents to be in.
I feel like we lost lots of marks that we weren't have to loose, thus I'm not challenging you autorithy, but simple need understanding because we got a similar mark to this one on our first submition and we've been keeping a close eye to our work, apparently not close enough, becouse with how things are going the ending won't be good for us. So please help me and us understand these mistakes we keep making so we can avoid them.
Thank you.
Have a blessed day. 
------------------------------------------------------------
Good Afternoon, Madam,

I am writing to seek clarification on the marking criteria and allocation of marks for our recent submissions. I understand the penalty for omitting the group name was due to our oversight and carelessness, and I acknowledge this error.

However, I am confused by the feedback regarding the format of our documents. As a team, we aimed to create documents that effectively 'present' and communicate the system's details to the client/System Coordinator. Could you please provide guidance on the preferred format if not in presentation style? Additionally, an explanation of what constitutes a 'presentation format' would be greatly appreciated, as we believed our structure followed traditional standards.

Concerning the rubric, we received a score of 2.5 for the introduction, despite our belief that it was clear and concise, outlining the purpose of the solution, core features, target audience, and expected outcomes, summarizing the document in the first read. According to our research this is a great why to capture and provides an overrall view of the document. If possible, could you elaborate on the criteria for layout and design, and what adjustments we could make to meet the expected standards?

I assure you that this inquiry is not a challenge to your authority but a request for understanding. We have closely reviewed our work, especially after receiving similar feedback on our first submission. The goal is to comprehend and rectify these recurring issues to improve our future submissions.

Thank you for your time and assistance.



----------------------------------------------------------------------------------------------
STUDENT COUNSELLING SYSTEM DB SCHEMA
______________________________________
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='ADDRESS')
CREATE TABLE [ADDRESS]
(
 [address_id] bigint NOT NULL CONSTRAINT [DF_ADDRESS_address_id] DEFAULT IDENTITY(0,1) ,
 [country]    varchar(50) NOT NULL ,
 [province]   varchar(50) NOT NULL ,
 [city]       varchar(50) NOT NULL ,
 [street]     varchar(50) NOT NULL ,
 [zip_code]   int NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([address_id] ASC),
 CONSTRAINT [Check_1] CHECK (  )
);
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='Student')
CREATE TABLE [Student]
(
 [stu_number]      bigint NOT NULL CONSTRAINT [DF_Student_stu_number] DEFAULT IDENTITY(0,1) ,
 [stu_fname]       varchar(50) NOT NULL CONSTRAINT [DF_Student_stu_fname] DEFAULT NOT NULL ,
 [stu_lname]       varchar(50) NOT NULL CONSTRAINT [DF_Student_stu_lname] DEFAULT NOT NULL ,
 [stu_age]         AS stud_age AS (DATEDIFF(year, stud_DOB, GETDATE())) ,
 [stu_gender]      char(1) NOT NULL CONSTRAINT [DF_Student_stu_gender] DEFAULT check (stud_gender IN ('M', 'F')) NOT NULL ,
 [stu_DOB]         date NOT NULL CONSTRAINT [DF_Student_stu_DOB] DEFAULT NOT NULL ,
 [stu_phone]       varchar(10) NOT NULL CONSTRAINT [DF_Student_stu_phone] DEFAULT NOT NULL UNIQUE ,
 [stu_email]       varchar(50) NOT NULL ,
 [stu_signup_date] datetime NOT NULL CONSTRAINT [DEFAULT GETDATETIME()] DEFAULT DEFAULT GETDATETIME() ,
 [stu_password]    varbinary(200) NOT NULL CONSTRAINT [DF_Student_stu_password] DEFAULT ENCRYPTEBYPASSPHRASE('password', stu_password) ,
 [address_id]      bigint NOT NULL CONSTRAINT [DF_Student_address_id] DEFAULT NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([stu_number] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [Student] 
 (
  [address_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='COUNSELLOR')
CREATE TABLE [COUNSELLOR]
(
 [counsellor_id]          bigint NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_id] DEFAULT IDENTITY(0,1) ,
 [address_id]             bigint NOT NULL CONSTRAINT [DF_COUNSELLOR_address_id] DEFAULT NOT NULL ,
 [counsellor_fname]       varchar(30) NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_fname] DEFAULT NOT NULL ,
 [counsellor_lname]       varchar(20) NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_lname] DEFAULT NOT NULL ,
 [counsellor_DOB]         date NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_DOB] DEFAULT NOT NULL ,
 [counsellor_age]         AS counsellor_age AS DATEDIFF(year, counsellor_DOB, GETDATE()) ,
 [counsellor_gender]      char(1) COLLATE check(counsellor_gendder IN ('M','F')) NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_gender] DEFAULT  CHECK(counsellor_gender IN ('F', 'M')) ,
 [counsellor_phone]       varchar(10) NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_phone] DEFAULT NOT NULL UNIQUE ,
 [counsellor_email]       varchar(50) NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_email] DEFAULT NOT NULL ,
 [counsellor_signup_date] AS AT DEFAULT GETDATETIME() ,
 [counsellor_password]    varbinary(200) NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_password] DEFAULT ENCRYPTEBYPASSPHRASE('password', counsellor_password) ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([counsellor_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [COUNSELLOR] 
 (
  [address_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='LOG')
CREATE TABLE [LOG]
(
 [log_id]           bigint NOT NULL ,
 [admin_id]         bigint NOT NULL ,
 [action]           varchar(50) NOT NULL ,
 [action_timestamp] AS DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([log_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [LOG] 
 (
  [admin_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='EVENTS')
CREATE TABLE [EVENTS]
(
 [event_id]           bigint NOT NULL CONSTRAINT [DF_EVENTS_event_id] DEFAULT IDENTITY(0,1) ,
 [admin_id]           bigint NOT NULL CONSTRAINT [DF_EVENTS_admin_id] DEFAULT NOT NULL ,
 [event_header]       varchar(50) NOT NULL CONSTRAINT [DF_EVENTS_event_header] DEFAULT NOT NULL UNIQUE ,
 [event_description]  text NOT NULL CONSTRAINT [DF_EVENTS_event_description] DEFAULT NOT NULL ,
 [event_date]         AS DEFAULT GETDATETIME() ,
 [event_created_date] AS DEFAULT GETDATETIME() ,
 [event_updated_date] AS DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([event_id] ASC)
);

CREATE NONCLUSTERED INDEX [FK_1] ON [EVENTS] 
 (
  [admin_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='CORE_SERVICES')
CREATE TABLE [CORE_SERVICES]
(
 [service_id]           bigint NOT NULL CONSTRAINT [DF_CORE_SERVICES_service_id] DEFAULT IDENTITY(0,1) ,
 [admin_id]             bigint NOT NULL CONSTRAINT [DF_CORE_SERVICES_admin_id] DEFAULT NOT NULL ,
 [service_name]         varchar(50) NOT NULL CONSTRAINT [DF_CORE_SERVICES_service_name] DEFAULT NOT NULL UNIQUE ,
 [service_description]  text NOT NULL CONSTRAINT [DF_CORE_SERVICES_service_description] DEFAULT NOT NULL ,
 [service_created_date] AS DEFAULT GETDATETIME() ,
 [service_updated]      AS DEFAULT DATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([service_id] ASC)
);

CREATE NONCLUSTERED INDEX [FK_1] ON [CORE_SERVICES] 
 (
  [admin_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='COMMON_ISSUES')
CREATE TABLE [COMMON_ISSUES]
(
 [common_issue_id]           bigint NOT NULL CONSTRAINT [DF_COMMON_ISSUES_common_issue_id] DEFAULT IDENTITY(0,1) ,
 [admin_id]                  bigint NOT NULL CONSTRAINT [DF_COMMON_ISSUES_admin_id] DEFAULT NOT NULL ,
 [common_issue_name]         varchar(50) NOT NULL CONSTRAINT [DF_COMMON_ISSUES_common_issue_name] DEFAULT NOT NULL UNIQUE ,
 [common_issue_description]  text NOT NULL CONSTRAINT [DF_COMMON_ISSUES_common_issue_description] DEFAULT NOT NULL ,
 [common_issue_created_date] AS DEFAULT DATETIME() ,
 [common_issue_updated]      AS DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([common_issue_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [COMMON_ISSUES] 
 (
  [admin_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='EMERGENCY_RESOURCES')
CREATE TABLE [EMERGENCY_RESOURCES]
(
 [emergency_resource_id]           bigint NOT NULL CONSTRAINT [DF_EMERGENCY_RESOURCES_emergency_resource_id] DEFAULT IDENTITY(0,1) ,
 [admin_id]                        bigint NOT NULL CONSTRAINT [DF_EMERGENCY_RESOURCES_admin_id] DEFAULT NOT NULL ,
 [emergency_resource_name]         varchar(50) NOT NULL CONSTRAINT [DF_EMERGENCY_RESOURCES_emergency_resource_name] DEFAULT NOT NULL UNIQUE ,
 [emergency_resource_description]  text NOT NULL CONSTRAINT [DF_EMERGENCY_RESOURCES_emergency_resource_description] DEFAULT NOT NULL ,
 [emergency_resource_phone]        varchar(10) NOT NULL CONSTRAINT [DF_EMERGENCY_RESOURCES_emergency_resource_phone] DEFAULT NOT NULL UNIQUE ,
 [emergency_resource_created_date] AS DEFAULT GETDATETIME() ,
 [emergency_resource_updated]      AS DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([emergency_resource_id] ASC)
);

CREATE NONCLUSTERED INDEX [FK_1] ON [EMERGENCY_RESOURCES] 
 (
  [admin_id] ASC
 )

-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='FAQs')
CREATE TABLE [FAQs]
(
 [faq_id]                   bigint NOT NULL CONSTRAINT [DF_FAQs_faq_id] DEFAULT IDENTITY(0,1) ,
 [faq_question_description] text NOT NULL CONSTRAINT [DF_FAQs_faq_question_description] DEFAULT NOT NULL ,
 [faq_created_date]         AS DEFAULT GETDATETIME() ,
 [faq_updated]              AS DEFAULT DATETIME() ,
 [stu_number]               bigint NOT NULL CONSTRAINT [DF_Student_stu_number] DEFAULT IDENTITY(0,1) ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([faq_id] ASC)
);
GO


CREATE NONCLUSTERED INDEX [FK_1] ON [FAQs] 
 (
  [stu_number] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='CHATS')
CREATE TABLE [CHATS]
(
 [chat_id]       bigint NOT NULL CONSTRAINT [DF_CHATS_chat_id] DEFAULT IDENTITY(0,1) ,
 [counsellor_id] bigint NOT NULL CONSTRAINT [DF_COUNSELLOR_counsellor_id] DEFAULT NOT NULL ,
 [stu_number]    bigint NOT NULL CONSTRAINT [DF_Student_stu_number] DEFAULT NOT NULL ,
 [chat_message]  text NOT NULL CONSTRAINT [DF_CHATS_chat_message] DEFAULT NOT NULL ,
 [chat_date]     datetime NOT NULL CONSTRAINT [DF_CHATS_chat_date] DEFAULT DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([chat_id] ASC)
);

CREATE NONCLUSTERED INDEX [FK_1] ON [CHATS] 
 (
  [counsellor_id] ASC
 )

CREATE NONCLUSTERED INDEX [FK_2] ON [CHATS] 
 (
  [stu_number] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='APPOINTMENT')
CREATE TABLE [APPOINTMENT]
(
 [appointent_id]    bigint NOT NULL CONSTRAINT [DF_APPOINTMENT_appointent_id] DEFAULT IDENTITY(0,1) ,
 [appointment_date] datetime NOT NULL CONSTRAINT [DF_APPOINTMENT_appointment_date] DEFAULT DEFAULT GETDATETIME() NOT NULL ,
 [stu_number]       bigint NOT NULL CONSTRAINT [DF_APPOINTMENT_stu_number] DEFAULT NOT NULL ,
 [counsellor_id]    bigint NOT NULL CONSTRAINT [DF_APPOINTMENT_counsellor_id] DEFAULT NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([appointent_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [APPOINTMENT] 
 (
  [stu_number] ASC
 )

CREATE NONCLUSTERED INDEX [FK_2] ON [APPOINTMENT] 
 (
  [counsellor_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='SESSION')
CREATE TABLE [SESSION]
(
 [session_id]      bigint NOT NULL CONSTRAINT [DF_SESSION_session_id] DEFAULT IDENTITY(0,1) ,
 [session_date]    AS DEFAULT GETDATETIME() ,
 [appointent_id]   bigint NOT NULL CONSTRAINT [DF_SESSION_appointent_id] DEFAULT NOT NULL ,
 [session_type_id] bigint NOT NULL CONSTRAINT [DF_SESSION_session_type_id] DEFAULT NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([session_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [SESSION] 
 (
  [appointent_id] ASC
 )

CREATE NONCLUSTERED INDEX [FK_2] ON [SESSION] 
 (
  [session_type_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='SESSION_TYPE')
CREATE TABLE [SESSION_TYPE]
(
 [session_type_id] bigint NOT NULL CONSTRAINT [DF_SESSION_TYPE_session_type_id] DEFAULT IDENTITY(0,1) ,
 [session_type]    varchar(50) NOT NULL CONSTRAINT [DF_SESSION_TYPE_session_type] DEFAULT CHECK( session_type IN('physical', 'Video')) ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([session_type_id] ASC)
);
----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='SESSION_NOTE')
CREATE TABLE [SESSION_NOTE]
(
 [session_note_id]          bigint NOT NULL CONSTRAINT [DF_SESSION_NOTE_session_note_id] DEFAULT IDENTITY(0,1) ,
 [session_id]               bigint NOT NULL CONSTRAINT [DF_SESSION_NOTE_session_id] DEFAULT NOT NULL ,
 [session_note_title]       varchar(20) NOT NULL CONSTRAINT [DF_SESSION_NOTE_session_note_title] DEFAULT NOT NUILL ,
 [session_note_description] text NOT NULL CONSTRAINT [DF_SESSION_NOTE_session_note_description] DEFAULT NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([session_note_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [SESSION_NOTE] 
 (
  [session_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='RATING')
CREATE TABLE [RATING]
(
 [ranking_id]   bigint NOT NULL CONSTRAINT [DF_RATING_ranking_id] DEFAULT IDENTITY(0,1) ,
 [stu_number]   bigint NOT NULL CONSTRAINT [DF_RATING_stu_number] DEFAULT NOT NULL ,
 [rating_date]  AS DEFAULT GETDATETIME() ,
 [ranking_star] AS CHECK(ranking_star IN  (1,2,3,4,5)) ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([ranking_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [RATING] 
 (
  [stu_number] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='COMMENTS')
CREATE TABLE [COMMENTS]
(
 [comment_id]   bigint NOT NULL CONSTRAINT [DF_COMMENTS_comment_id] DEFAULT IDENTITY(0,1) ,
 [stu_number]   bigint NOT NULL CONSTRAINT [DF_COMMENTS_stu_number] DEFAULT NOT NULL ,
 [comment_date] AS DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([comment_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [COMMENTS] 
 (
  [stu_number] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='ENROLLMENT')
CREATE TABLE [ENROLLMENT]
(
 [enrollment_id]   bigint NOT NULL CONSTRAINT [DF_ENROLLMENT_enrollment_id] DEFAULT IDENTITY(0,1) ,
 [stu_number]      bigint NOT NULL CONSTRAINT [DF_ENROLLMENT_stu_number] DEFAULT NOT  NULL ,
 [course_id]       bigint NOT NULL CONSTRAINT [DF_ENROLLMENT_course_id] DEFAULT NOT NULL ,
 [enrollment_date] AS DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([enrollment_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [ENROLLMENT] 
 (
  [stu_number] ASC
 )


CREATE NONCLUSTERED INDEX [FK_2] ON [ENROLLMENT] 
 (
  [course_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='COURSE')
CREATE TABLE [COURSE]
(
 [course_id]     bigint NOT NULL CONSTRAINT [DF_COURSE_course_id] DEFAULT IDENTITY(0,1) ,
 [course_name]   varchar(50) NOT NULL CONSTRAINT [DF_COURSE_course_name] DEFAULT NO NULL ,
 [department_id] bigint NOT NULL CONSTRAINT [DF_COURSE_department_id] DEFAULT NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([course_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_2] ON [COURSE] 
 (
  [department_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='DEPARTMENT')
CREATE TABLE [DEPARTMENT]
(
 [department_id]   bigint NOT NULL CONSTRAINT [DF_DEPARTMENT_department_id] DEFAULT IDENTITY(0,1) ,
 [department_name] varchar(50) NOT NULL CONSTRAINT [DF_DEPARTMENT_department_name] DEFAULT NOT NULL UNIQUE ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([department_id] ASC)
);
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='STRESS_ADMISSION')
CREATE TABLE [STRESS_ADMISSION]
(
 [stress_admission_id] bigint NOT NULL CONSTRAINT [DF_STRESS_ADMISSION_stress_admission_id] DEFAULT IDENTITY(0,1) ,
 [stu_number]          bigint NOT NULL CONSTRAINT [DF_STRESS_ADMISSION_stu_number] DEFAULT NOT NULL ,
 [stressor_id]         bigint NOT NULL CONSTRAINT [DF_STRESS_ADMISSION_stressor_id] DEFAULT NOT NULL ,
 [admission_date]      AS DEFAULT GETDATETIME() ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([stress_admission_id] ASC)
);


CREATE NONCLUSTERED INDEX [FK_1] ON [STRESS_ADMISSION] 
 (
  [stu_number] ASC
 )


CREATE NONCLUSTERED INDEX [FK_2] ON [STRESS_ADMISSION] 
 (
  [stressor_id] ASC
 )
-----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='STRESSOR')
CREATE TABLE [STRESSOR]
(
 [stressor_id] bigint NOT NULL CONSTRAINT [DF_STRESSOR_stressor_id] DEFAULT IDENTITY(0,1) ,
 [stress_name] varchar(50) NOT NULL CONSTRAINT [DF_STRESSOR_stress_name] DEFAULT NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([stressor_id] ASC)
);
----------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='MOOD_TRACKER_MONITOR')
CREATE TABLE [MOOD_TRACKER_MONITOR]
(
 [mood_id]       bigint NOT NULL CONSTRAINT [DF_MOOD_TRACKER_MONITOR_mood_id] DEFAULT IDENTITY(0,1) ,
 [stu_number]    bigint NOT NULL CONSTRAINT [DF_Student_stu_number] DEFAULT NOT NULL ,
 [mood_response] int NOT NULL CONSTRAINT [DF_MOOD_TRACKER_MONITOR_mood_response] DEFAULT CHECK (mood_response IN(1,2,3,4,5)) NOT NULL ,
 [mood_date]     datetime NOT NULL CONSTRAINT [DF_MOOD_TRACKER_MONITOR_mood_date] DEFAULT DEFAULT GETDATETIME() NOT NULL ,


 CONSTRAINT [PK_1] PRIMARY KEY CLUSTERED ([mood_id] ASC)
);
GO


CREATE NONCLUSTERED INDEX [FK_1] ON [MOOD_TRACKER_MONITOR] 
 (
  [stu_number] ASC
 )
----------------------------------
{
  "users": {
    "userId1": {
      "name": "John Doe",
      "type": "student",
      "email": "john.doe@example.com",
      // Additional student details
    },
    "userId2": {
      "name": "Jane Smith",
      "type": "counsellor",
      "email": "jane.smith@counselling.org",
      // Additional counsellor details
    },
    // More users...
  },
  "chats": {
    "chatId1": {
      "messages": {
        "messageId1": {
          "senderId": "userId1",
          "receiverId": "userId2",
          "timestamp": "2024-05-18T12:00:00Z",
          "text": "Hello, I need some advice on managing stress."
        },
        "messageId2": {
          "senderId": "userId2",
          "receiverId": "userId1",
          "timestamp": "2024-05-18T12:01:00Z",
          "text": "Sure, I can help you with that. Let's start by discussing your main stressors."
        },
        // More messages...
      },
      "participants": ["userId1", "userId2"],
      "lastMessage": "messageId2",
      "lastUpdated": "2024-05-18T12:01:00Z"
    },
    // More chats...
  }
}

----------------------------------

->Profile: enable users to 'GO' to profile edit page
->Password Reset: enable users to 'GO' to profile edit page
->About SCS: Visit the about page
->Mut Counselling: Link to MUT student counselling page.
->Privacy: Page describing the security measure taken to protect user data. 
---------------------------------------
<?php
// User's password
$password = 'user_password_here';

// Creating a random salt
$salt = bin2hex(random_bytes(32));

// Hashing the password with the salt using SHA-256
$hashedPassword = hash('sha256', $salt . $password);

// Now you can store $hashedPassword and $salt in your MySQL database
?>


---------------------------------------
---------------------------------------
---------------------------------------
RETURN
---------------------------------------
---------------------------------------
---------------------------------------
--------------------------------------
USE STUDENT_COUNSELLING_SYSTEM;

IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.name='ADDRESS')
CREATE TABLE [ADDRESS]
(
 [address_id] INTEGER IDENTITY(0,1) NOT NULL,
 [country]    VARCHAR(50) NOT NULL,
 [province]   VARCHAR(50) NOT NULL,
 [city]       VARCHAR(50) NOT NULL,
 [street]     VARCHAR(50) NOT NULL,
 [zip_code]   INTEGER NOT NULL,

 CONSTRAINT [Address_address_id] PRIMARY KEY CLUSTERED ([address_id] ASC)
);
--CREATE INDEX address_indx ON ADDRESS(city)


IF NOT EXISTS(SELECT * FROM sys.tables t WHERE t.name='STUDENT')
CREATE TABLE STUDENT
(
	[stu_id] BIGINT IDENTITY(22200,1) NOT NULL,
	[stu_fname] VARCHAR(50) NOT NULL,
	[stu_lname] VARCHAR(50) NOT NULL,
	[stu_DOB] DATE NOT NULL,
	[stu_age]  AS (DATEDIFF(year, stu_DOB, GETDATE())),
	[stu_gender] CHAR(1) CHECK(stu_gender IN ('M','F')) NOT NULL,
	[stu_email] VARCHAR(50) NOT NULL,
	[stu_phone] VARCHAR(10) NOT NULL,
	[stu_signup_date] DATETIME DEFAULT GETDATE(),
	[stu_password] VARBINARY(200),
	[stu_address] INTEGER 

	CONSTRAINT [stu_address_fk] FOREIGN KEY REFERENCES ADDRESS(address_id)
	CONSTRAINT [STUDENT_stu_id] PRIMARY KEY CLUSTERED([stu_id] ASC)
);
--CREATE INDEX student_index ON STUDENT(stu_fname);

IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='COUNSELLOR')
CREATE TABLE COUNSELLOR
(
 [counsellor_id] BIGINT IDENTITY(200220, 1),
 [counsellor_fname] VARCHAR(50) NOT NULL,
 [counsellor_lname] VARCHAR(50) NOT NULL,
 [counsellor_DOB] DATE NOT NULL,
 [counsellor_age] AS(DATEDIFF(year, counsellor_DOB, GETDATE())),
 [counsellor_gender] CHAR(1) CHECK(counsellor_gender IN ('M','F')) NOT NULL,
 [counsellor_email] VARCHAR(50) NOT NULL UNIQUE,
 [counsellor_phone] VARCHAR(10) NOT NULL UNIQUE,
 [counsellor_signup_date] DATE DEFAULT GETDATE(),
 [counsellor_password] VARBINARY(200) NOT NULL,
 [counsellor_address] INTEGER
 
 CONSTRAINT[counsellor_address_fk] FOREIGN KEY REFERENCES ADDRESS(address_id)
 CONSTRAINT[COUNSELLOR_counsellor_index] PRIMARY KEY([counsellor_id] ASC)
 
);
--CREATE INDEX counsellor_index ON COUNSELLOR(counsellor_fname);
--ALTER TABLE COUNSELLOR ADD  [counsellor_address] INTEGER FOREIGN KEY REFERENCES ADDRESS(address_id);
 
 IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='ADMINISTRATOR')
 CREATE TABLE ADMINISTRATOR(
	[admin_id] BIGINT IDENTITY(1011100,1),
	[admin_fname] VARCHAR(50) NOT NULL,
	[admin_lname] VARCHAR(50) NOT NULL,
	[admin_DOB] DATE NOT NULL,
	[admin_age] AS(DATEDIFF(year, admin_DOB, GETDATE())),
	[admin_gender] CHAR(1) CHECK( admin_gender IN ('M','F')) NOT NULL,
	[admin_email] VARCHAR(50) NOT NULL UNIQUE,
	[admin_phone] VARCHAR(10) NOT NULL UNIQUE,
	[admin_signup-date] DATE DEFAULT GETDATE(),
	[admin_password] VARBINARY(200) NOT NULL,
	[admin_address] INTEGER
	
	CONSTRAINT[admin_address_fk] FOREIGN KEY REFERENCES ADDRESS(address_id)
	CONSTRAINT[ADMIN_admin_index] PRIMARY KEY CLUSTERED([admin_id] ASC)
 );
--CREATE INDEX admin_index ON ADMINISTRATOR(admin_fname);
 --EXEC sp_rename 'ADMINISTRATOR.aadmin_fname', 'admin_fname', 'COLUMN'; 


		--THESE ARE ADMIN RELATIONS
IF NOT EXISTS(SELECT * FROM sys.tables t WHERE T.NAME='EVENT')
 CREATE TABLE EVENT(
	[event_id] BIGINT IDENTITY(10930, 1),
	[event_name] VARCHAR(50) NOT NULL,
	[event_description] TEXT NOT NULL,
	[event_date] DATE NOT NULL,
	[event_created_date] DATE DEFAULT GETDATE(),
	[event_updated_at] DATE DEFAULT GETDATE(),
	[admin_id] BIGINT

	CONSTRAINT[EVENT_admin_id_fk] FOREIGN KEY REFERENCES ADMINISTRATOR(admin_id)
	CONSTRAINT[EVENT_event_id] PRIMARY KEY CLUSTERED([event_id] ASC) 
 );
 --CREATE INDEX event_index ON EVENT(event_name);
 
IF NOT EXISTS(SELECT * FROM sys.tables t WHERE t.NAME='CORE_SERVICE')
 CREATE TABLE CORE_SERVICE(
	[service_id] BIGINT IDENTITY(806640,1),
	[service_name] VARCHAR(50) NOT NULL,
	[service_description] TEXT NOT NULL,
	[service_created_date] DATE DEFAULT GETDATE(),
	[admin_id] BIGINT 
	
	CONSTRAINT[SERVICE_admin_id_fk] FOREIGN KEY REFERENCES ADMINISTRATOR(admin_id)
	CONSTRAINT[SERVICE_service_id] PRIMARY KEY CLUSTERED([service_id] asc)
 );
 --CREATE INDEX service_index ON CORE_SERVICE(service_name);

 IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='COMMON_ISSUES')
  CREATE TABLE COMMON_ISSUES(
	[common_issue_id] BIGINT IDENTITY(20500, 1),
	[common_issue_name] VARCHAR(50) NOT NULL UNIQUE,
	[common_issue_description] TEXT NOT NULL,
	[common_issue_created_date] DATE DEFAULT GETDATE(),
	[admin_id] BIGINT
	
	CONSTRAINT[ISSUE_admin_id_fk] FOREIGN KEY REFERENCES ADMINISTRATOR(admin_id)
	CONSTRAINT[ISSUE_issue_id] PRIMARY KEY CLUSTERED([common_issue_id] ASC)
  );
  --CREATE INDEX issue_index ON COMMON_ISSUES(common_issue_name);

IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='EMERGENCY_RESOURCES')
 CREATE TABLE EMERGENCY_RESOURCES(
	[emergency_resource_id] BIGINT IDENTITY(90460, 1),
	[emergency_resource_name] VARCHAR(50) NOT NULL,
	[emergency_resource_phone] VARCHAR(20) NOT NULL UNIQUE,
	[emergency_resource_created_date] DATE DEFAULT GETDATE(),
	[admin_id] BIGINT

	CONSTRAINT[EMERGENCY_RESOURCE_admin_id] FOREIGN KEY REFERENCES ADMINISTRATOR(admin_id)
	CONSTRAINT[EMERGENCY_emergency_resource_id] PRIMARY KEY CLUSTERED([emergency_resource_id] ASC)
 );
 --CREATE INDEX emergency_index ON EMERGENCY_RESOURCES(emergency_resource_name);
	

			--THESE ARE COUNSELLOR RELATIONS
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='RATING')
 CREATE TABLE RATING(
	[rating_id] BIGINT IDENTITY(0,1),
	[rating_star] CHAR(1) CHECK(rating_star IN ('1','2','3','4','5')),
	[rating_date] DATE DEFAULT GETDATE(),
	[stu_id] BIGINT FOREIGN KEY REFERENCES STUDENT(stu_id),
	[counsellor_id] BIGINT FOREIGN KEY REFERENCES COUNSELLOR(counsellor_id)

	CONSTRAINT[RATING_rating_id] PRIMARY KEY CLUSTERED([rating_id] ASC)
 );
 --CREATE INDEX rating_index ON RATING(rating_star);
 
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='APPOINTMENT')
  CREATE TABLE APPOINTMENT(
	[appointment_id] BIGINT IDENTITY(40770, 1),
	[appointment_date] DATE DEFAULT GETDATE(),
	[stu_id] BIGINT FOREIGN KEY REFERENCES STUDENT(stu_id),
	[counsellor_id] BIGINT FOREIGN KEY REFERENCES COUNSELLOR(counsellor_id)

	CONSTRAINT[APPOINTMENT_appointment_id] PRIMARY KEY CLUSTERED ([appointment_id] ASC)
  );
  --CREATE INDEX appointment_index ON APPOINTMENT(appointment_date);

IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='SESSION')
 CREATE TABLE SESSION(
	[session_id] BIGINT IDENTITY(5100, 1),
	[session_date] DATE NOT NULL,
	[session_type] VARCHAR(20) CHECK ([session_type] IN ('PHYSICAL', 'VIRTUAL')) NOT NULL,
	[appointment_id] BIGINT FOREIGN KEY REFERENCES APPOINTMENT(appointment_id)

	CONSTRAINT[SESSION_session_id] PRIMARY KEY CLUSTERED ([session_id] ASC)
 );
  --CREATE INDEX session_index ON SESSION(session_type)

 IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='SESSION_NOTE')
 CREATE TABLE SESSION_NOTE(
	[session_note_id] BIGINT IDENTITY(30150, 1),
	[session_note_header] VARCHAR(50) NOT NULL,
	[session_note_description] TEXT NOT NULL,
	[session_id] BIGINT FOREIGN KEY REFERENCES SESSION(session_id)

	CONSTRAINT[SESSION_session_note_pk] PRIMARY KEY CLUSTERED ([session_note_id] ASC)
 );
 --CREATE INDEX session_note_index ON SESSION_NOTE(session_note_header);


			--THESE ARE STUDENT RELATIONS
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='COMMENT')
 CREATE TABLE COMMENT(
	[comment_id] BIGINT IDENTITY(0, 1),
	[comment_description] TEXT NOT NULL,
	[comment_date] DATE DEFAULT GETDATE(),
	[stu_id] BIGINT FOREIGN KEY REFERENCES STUDENT(stu_id)

	CONSTRAINT[COMMENT_comment_id] PRIMARY KEY CLUSTERED ([comment_id] ASC)
 );
 ---CREATE INDEX comment_index ON COMMENT(comment_date)

IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='MOOD')
 CREATE TABLE MOOD(
	[mood_id] BIGINT IDENTITY(1000, 1),
	[mood_rate] VARCHAR(50) CHECK ([mood_rate] IN ('VERY SAD', 'SAD', 'NORMAL', 'HAPPY', 'VERY HAPPY')),
	[mood_rate_date] DATE DEFAULT GETDATE(),
	[stu_id] BIGINT FOREIGN KEY REFERENCES STUDENT(stu_id)

	CONSTRAINT[MOOD_mood_id] PRIMARY KEY CLUSTERED ([mood_id] ASC)
 );
 --CREATE INDEX mood_index ON MOOD(mood_rate);

IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='ENROLLMENT')
 CREATE TABLE ENROLLMENT(
	[enrollment_id] BIGINT IDENTITY(90400, 1),
	[enrollment_date] DATE DEFAULT GETDATE(),
	[stu_id] BIGINT FOREIGN KEY REFERENCES STUDENT(stu_id),
	[course_id] BIGINT FOREIGN KEY REFERENCES COURSE(course_id)

	CONSTRAINT[ENROLLMENT_enrollment_id] PRIMARY KEY CLUSTERED ([enrollment_id] ASC)
 );
-- CREATE INDEX enrollment_index ON ENROLLMENT(enrollment_date);
-- ALTER TABLE ENROLLMENT ADD course_id BIGINT FOREIGN KEY REFERENCES COURSE(course_id);

IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='COURSE')
 CREATE TABLE COURSE(
	[course_id] BIGINT IDENTITY(10800, 1),
	[course_name] VARCHAR(50) NOT NULL,
	[enrollment_id] BIGINT FOREIGN KEY REFERENCES ENROLLMENT(enrollment_id),
	--[department_id] INTEGER FOREIGN KEY REFERENCES DEPARTMENT(department_id)

	CONSTRAINT[COURSE_course_id] PRIMARY KEY CLUSTERED ([course_id] ASC)
 );
  --ALTER TABLE COURSE ADD department_id INTEGER FOREIGN KEY REFERENCES DEPARTMENT(department_id);
-- CREATE INDEX course_index ON COURSE(course_name);


IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='DEPARTMENT')
 CREATE TABLE DEPARTMENT(
	[department_id] INTEGER IDENTITY(100, 1),
	[department_name] VARCHAR(50) NOT NULL UNIQUE,

	--CONSTRAINT[DEPARTMENT_department_id] PRIMARY KEY CLUSTERED ([department_id] ASC)
 );
 --CREATE INDEX department_name ON DEPARTMENT(department_name);


IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='REFERRAL_ADMISSION')
 CREATE TABLE REFERRAL_ADMISSION(
	[ref_admission_id] BIGINT IDENTITY(10200, 1),
	[ref_admission_date] DATE DEFAULT GETDATE(),
	[stu_id] BIGINT FOREIGN KEY REFERENCES STUDENT(stu_id),
	--[ref_reason_id] BIGINT FOREIGN KEY REFERENCES REFERRAL_REASON(ref_reason_id)

	CONSTRAINT[REFERRAL_ADMISSION_ref_admission_id] PRIMARY KEY CLUSTERED ([ref_admission_id] ASC)
 );
 --CREATE INDEX ref_admission_index ON REFERRAL_ADMISSION(ref_admission_date);
 --ALTER TABLE REFERRAL_ADMISSION ADD ref_reason_id BIGINT FOREIGN KEY REFERENCES REFERRAL_REASON([ref_reason_id]);


IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='REFERRAL_REASON')
 CREATE TABLE REFERRAL_REASON(
	[ref_reason_id] BIGINT IDENTITY(6100, 1),
	[ref_reason_name] VARCHAR(50) NOT NULL,
	[ref_reason_description] TEXT NOT NULL,

	CONSTRAINT[REFERRAL_REASON_ref_reason_id] PRIMARY KEY ([ref_reason_id] ASC)
 );
 --CREATE INDEX ref_reason_index ON REFERRAL_REASON(ref_reason_name);
 

 IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='FAQ')
CREATE TABLE FAQ(
	[faq_id] INTEGER IDENTITY(0,1),
	[faq_id_description] TEXT NOT NULL,
	[faq_date] DATE DEFAULT GETDATE(),
	[stu_id] BIGINT FOREIGN KEY REFERENCES STUDENT(stu_id)
	
	CONSTRAINT [FAQ_faq_id] PRIMARY KEY CLUSTERED ([faq_id] ASC) 
);
-- CREATE INDEX faq_index ON FAQ (faq_date);
	
	
IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='FAQ_RESPONSE')
CREATE TABLE FAQ_RESPONSE(
	[faq_response_id] INTEGER IDENTITY(0,1),
	[faq_response_header] VARCHAR(50) NOT NULL UNIQUE,
	[faq_response_description] TEXT NOT NULL,
	[faq_response_date] DATE DEFAULT GETDATE(),
	[faq_id] INTEGER FOREIGN KEY REFERENCES FAQ(faq_id),
	[admin_id] BIGINT FOREIGN KEY REFERENCES ADMINISTRATOR(admin_id)
	
	CONSTRAINT[FAQ_RESPONSE_faq_response_id] PRIMARY KEY CLUSTERED ([faq_response_id] ASC)
);

-- CREATE INDEX faq_response_index ON FAQ_RESPONSE(faq_response_id);


IF NOT EXISTS (SELECT * FROM sys.tables t WHERE t.NAME='TESTER')
CREATE TABLE TESTER(
	user_id BIGINT IDENTITY(22200, 1),
	user_fname VARCHAR(20) NOT NULL,
	user_lname VARCHAR(20) NOT NULL,
	user_DOB DATE NOT NULL,
	user_age AS(DATEDIFF(year, user_DOB, GETDATE())),
	user_gender CHAR(1) CHECK(user_gender IN ('M','F')),
	user_signup_date DATETIME DEFAULT GETDATE(),
	user_phone VARCHAR(10) NOT NULL UNIQUE, 
	user_email VARCHAR(50) NOT NULL UNIQUE,
	user_password VARBINARY(200)


	CONSTRAINT [USER_user_index] PRIMARY KEY CLUSTERED([user_id] ASC)
);


SELECT * FROM ADDRESS;
SELECT * FROM STUDENT;
SELECT * FROM COUNSELLOR;
SELECT * FROM ADMINISTRATOR;
SELECT * FROM EVENT;
SELECT * FROM CORE_SERVICE;
SELECT * FROM COMMON_ISSUES;
SELECT * FROM EMERGENCY_RESOURCES;
SELECT * FROM RATING;
SELECT * FROM APPOINTMENT;
SELECT * FROM SESSION;
SELECT * FROM SESSION_NOTE;
SELECT * FROM COMMENT;
SELECT * FROM MOOD;
SELECT * FROM ENROLLMENT;
SELECT * FROM COURSE;
SELECT * FROM DEPARTMENT;
/*
INSERT INTO TESTER(user_fname, user_lname, user_DOB, user_gender, user_phone, user_email, user_password)
VALUES('Gojo', 'Saturo', '1996-12-31', 'M', '0768356329', 'SaturoGojo@jjk.com', CAST('TheStrongest' AS VARBINARY(200)));

SELECT user_id AS USER_ID, user_fname AS FIRSTNAME, user_lname AS LASTNAME, user_DOB AS DATE_OF_BIRTH, user_age AS AGE, 
       user_gender AS GENDER, user_signup_date AS SIGNUP_DATE, user_phone AS PHONE, user_email AS EMAIL_ADDRESS,
	   CAST(user_password AS VARCHAR(200)) AS password
FROM TESTER;

SELECT * FROM TESTER;

SELECT * FROM STUDENT;
SELECT * FROM [ADDRESS];
*/
-----------------------------------------------------------------------------------------------------------------------
Terresa 08 kingslay
-----------------------------------------------------------------------------------------------------------------------
very sad: &#128542; 
sad: &#128532;
fine: &#128528; 
happy: &#128524;
very happy: &#128512;

 borderWidth: 2,
    borderColor: "red",

    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,




-- Step 1: Create a new temporary table
CREATE TABLE EVENT_Temp (
    [event_id] BIGINT IDENTITY(10930, 1),
    [event_name] VARCHAR(50) NOT NULL,
    [event_description] TEXT NOT NULL,
    [event_location] VARCHAR(50) NOT NULL, -- New column
    [event_date] DATE NOT NULL,
    [event_created_date] DATE DEFAULT GETDATE(),
    [event_updated_at] DATE DEFAULT GETDATE(),
    [admin_id] BIGINT,
    CONSTRAINT [EVENT_admin_id_fk] FOREIGN KEY REFERENCES ADMINISTRATOR(admin_id),
    CONSTRAINT [EVENT_event_id] PRIMARY KEY CLUSTERED ([event_id] ASC)
);

-- Step 2: Copy data from the original table
INSERT INTO EVENT_Temp
SELECT [event_id], [event_name], [event_description], NULL, [event_date], [event_created_date], [event_updated_at], [admin_id]
FROM EVENT;

-- Step 3: Drop the original table
DROP TABLE EVENT;

-- Step 4: Rename the temporary table
EXEC sp_rename 'EVENT_Temp', 'EVENT';

-- Optional: Recreate any indexes or constraints on the new table
-- (e.g., PRIMARY KEY, FOREIGN KEY, etc.)

-- Done!


